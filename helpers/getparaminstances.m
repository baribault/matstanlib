function instanceNames = getparaminstances(parameterRequest,varargin)
%GETPARAMINSTANCES returns a cell of indexed parameter instance names.
% 
% INSTANCENAMES = GETPARAMINSTANCES([],SAMPLES)
%   this function generates a list of all indexed parameter instance names
%   (of the form 'parameter[m,n]' if nonscalar, or 'parameter' if scalar)
%   across all parameters in SAMPLES.   
%   SAMPLES is a stucture of posterior samples (in the format generated by
%   extractsamples.m).
%   the INSTANCENAMES list is returned as cell of strings.
% 
% INSTANCENAMES = GETPARAMINSTANCES(PARAMETERREQUEST,SAMPLES)
%   to request a subset of parameter instance names, use PARAMETERREQUEST.
%   PARAMETERREQUEST is a string (or cell of strings) representing a
%   parameter name and/or a fragment of a parameter instance name that
%   includes the wildcard character *.  
%    -- if the wildcard character * is NOT included in (an element of)
%       PARAMETERREQUEST, then (that element of) PARAMETERREQUEST is
%       treated as a parameter name, and all indexed instances of that
%       parameter are added to the returned list, INSTANCENAMES. 
%    -- if the wildcard character * IS included in (an element of)
%       PARAMETERREQUEST, then (that element of) PARAMETERREQUEST is
%       treated as  a fragment of a parameter instance name.  any parameter
%       instance name matching the fragment (i.e., exactly matching
%       anything before or after the wildcard character) is returned.
%   a cell of parameter instance name strings, INSTANCENAMES, matching the
%   stem(s) in PARAMETERREQUEST, is returned.
% 
% 
% the syntax above is suggested when calling the function from a script. 
% the syntax below is suggested when calling the function from within a 
% function (to avoid storing multiple copies of SAMPLES in memory).  
% both syntax have the same functionality.  
% 
% 
% INSTANCENAMES = GETPARAMINSTANCES([],PARAMNAMES,CHAINSIZES)
% INSTANCENAMES = GETPARAMINSTANCES(PARAMETERREQUEST,PARAMNAMES,CHAINSIZES)
%   PARAMNAMES is a list of parameter fieldnames in SAMPLES (not given). 
%   CHAINSIZES is a cell of posterior sample sizes (i.e., a cell of 
%   [nIter nChain <array> <param>]), where the nth element of this cell
%   corresponds to the nth pararmeter named in PARAMNAMES. 
% 
% 
% Examples:
%   samples = 
%            beta: [2000×4×10x2 double]
%           alpha: [2000×4×15 double]
%         a_alpha: [2000×4 double]
%         b_alpha: [2000×4 double]
%         mu_beta: [2000×4x2 double]
%      sigma_beta: [2000×4 double]
%   
%   INSTANCENAMES = GETPARAMINSTANCES([],samples)
%     >> all instance names of all parameters is returned.
%   INSTANCENAMES = GETPARAMINSTANCES([], ...
%       fieldnames(samples),struct2cell(structfun(@size,samples,'uni',0)))
%     >> same as above, but using less RAM.
%   
%   INSTANCENAMES = GETPARAMINSTANCES({'alpha','*beta[2*]'},samples)
%     >> 'alpha' would be treated as a parameter name, and so all 15 
%         instance names for alpha would be include in the returned list.
%         '*beta[2*]' would be treated as a fragment and so the 4 matching
%         parameter instance names ('mu_beta[2]','sigma_beta[2]', 
%         'beta[2,1]', and 'beta[2,2]') would also be returned.
%   INSTANCENAMES = GETPARAMINSTANCES({'alpha','*beta[2*]'}, ...
%       fieldnames(samples),struct2cell(structfun(@size,samples,'uni',0)))
%     >> same as above, but using less RAM.
% 
% 
% See also EXTRACTSAMPLES
% 
% (c) beth baribault 2020 ---                                 > matstanlib 

%% check inputs
if isempty(parameterRequest)
    %do nothing --- all parameter instance names will be returned
elseif ischar(parameterRequest)
    parameterRequest = {parameterRequest};
elseif iscell(parameterRequest)
    if ~all(cellfun(@ischar,parameterRequest))
        error('the first input must be a string or cell of strings.')
    end
else
    error('the first input must be a string or cell of strings.')
end
%%% first syntax %%%
if length(varargin) == 1
    %input #2 = samples
    if isstruct(varargin{1})
        parameters = fieldnames(varargin{1});
        chainSizes = struct2cell(structfun(@size,varargin{1},'uni',0));
    else
        error('the second input must be the samples structure.')
    end
%%% second syntax %%%
elseif length(varargin) == 2
    %input #2 = parameters
    %input #3 = chainSizes
    parameters = varargin{1};
    chainSizes = varargin{2};
    if ischar(parameters)
        parameters = {parameters};
    elseif ~(iscell(parameters) && all(cellfun(@ischar,parameters)))
        error(['alternative syntax detected ... ' ...
            'the second input must be a cell of parameter name strings.'])
    end
    if isnumeric(chainSizes) && isvector(chainSizes)
        if ~isscalar(chainSizes)
            chainSizes = {chainSizes};
        else
            error(['alternative syntax detected ... ' ...
                'the third input must be a cell of chain size matrices.'])
        end
    elseif ~(iscell(chainSizes) && ...
            all(cellfun(@(x) isnumeric(x) && isvector(x),chainSizes)))
        error(['alternative syntax detected ... ' ...
            'the third input is must be a cell of chain size matrices.'])
    end
    if ~isequal(size(parameters),size(chainSizes))
        error(['alternative syntax detected ... ' ...
            'the second and third inputs must have the same size.'])
    end
%%% syntax not recognized %%%
else
    error(['number of inputs does not match a known manner of calling ' ...
        'this function.  this default syntax and alternative syntax ' ...
        'require two and three inputs, respectively.'])
end

%%
%generate ALL parameter instance names
allInstances = expandparamname(parameters,chainSizes);

%either return ALL parameter instance names ...
if isempty(parameterRequest)
    instanceNames = allInstances;
%... or continue parsing parameter request
else
    %is this a parameter name (no wildcard) 
    %   or a parameter instance fragment (has wildcard)?
    hasWildcard = contains(parameterRequest,'*');

    %collect relevant parameter instance names
    instanceNames = {};
    for p = 1:length(parameterRequest)
        if hasWildcard(p)
            %treat as parameter fragment
            paramRegExp = parameterRequest{p};          %start with the stem input
            paramRegExp = strrep(paramRegExp,'[','\['); %escape [ and ] to avoid
            paramRegExp = strrep(paramRegExp,']','\]'); %    regexp's use of brackets
            paramRegExp = strrep(paramRegExp,'*','.*'); %replace wildcard with "any charater N times"
            paramRegExp = ['^' paramRegExp '$'];        %add hard start and stop
            isMatching = cellfun(@(x) ~isempty(x), ...
                                        regexp(allInstances,paramRegExp));
            if any(isMatching)
                names = allInstances(isMatching);
            else
                error(['no parameter instances matching the fragment %s ' ...
                    'were found.'],parameterRequest{p})
            end
        else
            %treat as parameter name
            if ismember(parameterRequest{p},allInstances)
                %already an instance
                names = parameterRequest{p};
            else
                %a non-scalar parameter
                thisParameter = cellfun(@(x) strcmp(x,parameterRequest{p}),parameters);
                if any(thisParameter)
                    names = expandparamname(parameters(thisParameter), ...
                                              chainSizes(thisParameter));
                else
                    error('parameter name %s not found.',parameterRequest{p})
                end
            end
        end
        %add to list
        instanceNames = [instanceNames;names];
    end
    %remove duplicates (but without sorting!)
    instanceNames = unique(instanceNames,'stable');
end

end

%------------------------------------------------------------------------%
function allInstanceNames = expandparamname(parameters,chainSizes)
%expand parameter names into a list of parameter *instance* names
    allInstanceNames = {};
    for p = 1:length(parameters)
        %determine size of parameter
        if length(chainSizes{p}) == 2
            parameterSize = 1;
        elseif length(chainSizes{p}) == 3
            parameterSize = [chainSizes{p}(end) 1];
            parameterDims = 1;
        else
            parameterSize = chainSizes{p}(3:end);
            parameterDims = length(parameterSize);
        end
        nInstances = numel(ones(parameterSize));
        %make list of parameter instance names 
        if parameterSize == 1
            %scalar
            names = {parameters{p}};
        else
            %N-dimensional
            names = cell([nInstances 1]);
            clearvars ind
            for n = 1:nInstances
                [ind{1:parameterDims}] = ind2sub(parameterSize,n);
                ind = cellfun(@num2str,ind,'uni',0);
                indices = ['[' strjoin(ind,',') ']'];
                names{n} = [parameters{p} indices];
            end
        end
        %add to list
        allInstanceNames = [allInstanceNames;names];
    end
end