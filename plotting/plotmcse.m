function plotmcse(samples,parameterRequest)
%PLOTMCSE plots the Monte Carlo standard error (MCSE) over posterior quantiles. 
% 
% this function plots the Monte Carlo standard error (MCSE) over posterior
% quantiles, similar to the new effective sample size (ESS) quantile
% diagnostic plot recommended by Vehtari et al. (2020). 
% 
% visualizing whether MCSE is notably lower in some regions can inform your
% interpretation of the precision of quantile estimates.  
% 
% these MCSE may be compared to the MCSE of the mean and the standard
% deviation (sd), represented by the overlaid solid black and dashed black
% lines, respectively.  
% 
% diagnostic quantites will be represented as rugplots along the bottom of
% the plot (beneath the solid black line representing MCSE = 0). 
% the quantiles of samples where diagnostic quantities indicate problematic
% sampling are indicated via rug plots in the gray area beneath the plot. 
% the rug plot representing divergent transitions (if any) will be
% indicated in red, while the rug plot representing that the max treedepth
% was hit (if it was) will be indicated in orange.  
% (if neither diagnostic was problematic, no rug plot is included.)  
%   
% 
% PLOTMCSE(SAMPLES,PARAMETERREQUEST)
%   SAMPLES is assumed to be a strucutre of poserior samples, and
%   DIAGNOSTICS is the structure of Stan's diagnostic quantites.  
%   both are assumed to be in the format generated by extractsamples.m.  
%   
%   if PARAMETERREQUEST is a parameter name string, this function 
%   generates a figure with [all instances of] that parameter only.
%   if PARAMETERREQUEST is a cell of parameter name strings, this 
%   function generates a figure with [all instances of] each of those 
%   parameters.
%   PARAMETERREQUEST may include specific parameter instances, by 
%   including a valid index or indices in brackets after the parameter 
%   name (e.g., 'mu[3]','sigma[2,1]').  wildcards may also be used to 
%   select a subset of instances of a given parameter (e.g.,
%   'sigma[2,*]').
% 
% NOTE: this function will generate no more than 25 figures at once.
% 
% 
% Reference:  Vehtari, Gelman, Simpson, Carpenter, BÃ¼rkner (2020). 
%                   Rank-normalization, folding, and localization: An
%                   improved R^ for assessing convergence of MCMC.  ArXiv.
% 
% 
% See also COMPUTEMCSE, PLOTESS, RANKPLOTS, TRACEDENSITY
% 
% (c) beth baribault 2021 ---                                 > matstanlib

msl.options

%% parse required inputs
if nargin < 2
    error('too few inputs.')
end

%samples
if ~isstruct(samples)
    error('first input must be a structure of posterior samples.')
else
    %extract size info immediately
    allFields = fieldnames(samples);
    [nIterations,nChains] = size(samples.(allFields{1}),[1 2]);
    nSamples = nIterations*nChains;
end

%parameterRequest
if isempty(parameterRequest)
    parameterRequest = fieldnames(samples);
elseif ~(iscell(parameterRequest) && all(cellfun(@ischar,parameterRequest)))
    if ischar(parameterRequest)
        parameterRequest = {parameterRequest};
    else
        error(['parameterRequest must be a string or cell of strings ' ...
               'containing valid parameter or instance name strings.'])
    end
end

if nargin > 3
    error('too many inputs.')
end

%% prepare to generate plots
darkColor = getcolors('bluegreen');
lightColor = getcolors('lightbluegreen');

%maximum number of figures to generate
maxNfigures = 25;

%create a list of parameter instances
parameters = getparaminstances(parameterRequest, ...
    fieldnames(samples),struct2cell(structfun(@size,samples,'uni',0)));

%warn if over the figure limit
if length(parameters) > maxNfigures
    warning(['requested %i traceplots, but this function will only ' ...
        'generate up to %i traceplots in a single call (to protect ' ...
        'against memory overload and subsequent freezing). ' ...
        'try requesting fewer parameters/parameter instances.  ' ...
        'continuing to generate the first %i traceplots now ...'], ...
        length(parameters),maxNfigures,maxNfigures)
end

%% plot MCSE over quantiles for each parameter

%which quantiles to plot?
nPoints = 20;
xQuantiles = linspace(0.5/nPoints,1 - 0.5/nPoints,nPoints);

isInstance = cellfun(@(x) any(x=='['),parameters);
for p = 1:min([length(parameters),maxNfigures])
    %account for parameters vs. parameter instances
    if isInstance(p)
        [parameter,ind] = str2ind(parameters{p});
        chains = samples.(parameter)(:,:,ind{:});
    else
        parameter = parameters{p};
        chains = samples.(parameter);
    end
    
    %start a figure ...
    dumf = figure(999); %dummy figure to protect sizing
    f = figure('color',[1 1 1]);
    fpos = f.Position;
    f.Position = [fpos(1:2) [500 325]*figScaling];
    close(dumf.Number); %close dummy figure
    hold on
    h = gobjects([2 1]);
    
    %%%underlay line at MCSE = 0
    plot([-1 2],[0 0],'k-')
    
    %%% MCSE for the posterior mean
    MCSE_mean = computemcse(chains,'mean');
    h(1) = plot([-1 2],MCSE_mean*[1 1], ...
        'color',darkColor,'linestyle','-','linewidth',linePt);
    %%% MCSE for the posterior standard deviation
    MCSE_sd = computemcse(chains,'sd');
    h(2) = plot([-1 2],MCSE_sd*[1 1], ...
        'color',lightColor,'linestyle','-','linewidth',linePt);
    
    %%% plot MCSE over quantiles
    MCSEbyQuantile = NaN([1 length(xQuantiles)]);
    for n = 1:length(xQuantiles)
        MCSEbyQuantile(n) = computemcse(chains,'quantile',xQuantiles(n));
    end
    plot(xQuantiles,MCSEbyQuantile,'ko', ...
        'markerfacecolor',getcolors('bluegreen'), ...
        'markeredgecolor','k','markersize',markSz*0.65);
        
    %%% format
    xlim([0 1])
    yt = get(gca,'ytick'); yt(yt<0) = []; set(gca,'ytick',yt)
    xlabel('quantile')
    ylabel('MCSE')
    title(parameters{p},'interpreter','none')
    legend(h,'posterior mean MCSE','posterior sd MCSE', ...
        'color','none','box','on','location','best')
    set(gca,'fontsize',fontSz,'box','on')
end

end
