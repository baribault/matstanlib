function BFMI = computebfmi(diagnostics)
%COMPUTEBFMI computes the BFMI diagnostic for HMC/NUTS sampling performance. 
% 
% *** NOTE: this is only applicable to output from HMC/NUTS sampling.
% 
% this function computes the estimated Bayesian fraction of missing
% information (BFMI) from the energy history for a given chain.  
% BFMI quantifies the degree to which the momentum resampling permitted
% efficient exploration of the marginal energy distribution (and therefore 
% of the posterior). 
% 
% BFMI will generally range between 0 and 1.  
% a BFMI estimate of below 0.2 indicates poor quality sampling for a given
% chain (and so the output should not be trusted).  
% 
% 
% BFMI = COMPUTEBFMI(DIAGNOSTICS)
%   DIAGNOSTICS is a structure containing Stan's diagnostic quantites 
%   (in the format generated by extractsamples.m).  
%   
%   the BFMI for each chain is returned as a row vector, BFMI.  
% 
% 
% BFMI = COMPUTEBFMI(ENERGY)
%   alternatively, the first input may be the [nIterations nChains] matrix
%   found in diagnostics.energy__, or a vector with the energy history for
%   a single chain. 
% 
% 
% Reference:    Betancourt, M. (2016, April). Diagnosing Suboptimal
%                   Cotangent Disintegrations in Hamiltonian Monte Carlo.  
%                   ArXiv.
% 
% 
% See also PLOTENERGY
% 
% (c) beth baribault 2021 ---                                 > matstanlib


%% parse inputs
if nargin < 1
    error('at least one input is required.')
elseif nargin > 1
    error('too many inputs.')
end

%diagnostics/energy
if isstruct(diagnostics)
    %actually the diagnostics structure
    if ~isfield(diagnostics,'energy__')
        error('if input is struct-type, it must must have ''energy__'' as a field.')
    end
    energy = diagnostics.energy__;
elseif isnumeric(diagnostics) && ismatrix(diagnostics)
    %actually the energy__ field of the diagnostics structure
    energy = diagnostics;
    if isrow(energy)
        %... gave energy for a single chain, but in wrong orientation
        energy = energy';
    end
else
    error(['first input must be a structure of diagnostic quantities ' ...
        '(consisitent with the output of extractsamples.m) ' ...
        'or a matrix of energy values.'])
end

%% compute BFMI
%extract size info
[~,nChains] = size(energy);

%compute estimated BFMI
BFMI = NaN([1 nChains]);
for m = 1:nChains
    BFMI(m) = sum( diff(energy(:,m)).^2 ) / ...
              sum( (energy(:,m) - mean(energy(:,m))).^2 );
%     %equivalent to 
%     BFMI(m) = mean((diff(energy(:,m)).^2)) / ...
%                 var(energy(:,m),0); %normalize by N-1
end

end