function [samples,nChains] = removechain(samples,badChains)
%REMOVECHAIN removes a chain that has hurt you.
% 
% SAMPLES = REMOVECHAIN(SAMPLES,BADCHAINS)
%   this function removes one or more misbehaved chains from a structure 
%   of posterior samples, SAMPLES (in the format generated by extractsamples.m). 
%   BADCHAINS is a single chain index or a vector of indices indicating
%   which chains are to be removed.  
%   the chain removal is applied to all parameters/parameter instances in
%   the SAMPLES structure.  SAMPLES is then returned.
% 
% [SAMPLES,NCHAINS] = REMOVECHAIN(...)
%   while this function may be called with only one output argument, 
%   it is highly suggested to call the function with both output 
%   arguments, such that nChains is reassigned in the workspace to 
%   reflect the new, fewer number of chains.
% 
% NOTE: be wary of inadvertently applying this function more than once!
% 
% 
% See also REMOVEITERS, EXTRACTSAMPLES
% 
% (c) beth baribault 2019 ---                                 > matstanlib

%% check inputs
%samples
if ~isstruct(samples)
    error('the first input must be the samples structure.')
end
%badChains
if ~isnumeric(badChains) || ~isvector(badChains)
    error('badChains input must be a numeric vector.')
elseif any(mod(badChains,1) > 0) || any(badChains < 1)
    error('badChains must be an integer or vector of integers > 0.')
end

%% check if request is in a valid format
%extract the number of chains
parameters = fieldnames(samples);
nChains = size(samples.(parameters{1}),2);

%check if request is valid, given the number of chains
badChains = unique(badChains);
if any(~ismember(badChains,1:nChains))
    error(['the badChains input is invalid.  at least one index is ' ...
        'out of range given that there are %i chains.'],nChains)
end
if nChains - length(badChains) <= 0
    error(['cannot remove %i out of %i chains --- ' ...
        'no chains would be left!'],length(badChains),nChains)
end

%% remove the requested chain(s)
keptChains = setdiff(1:nChains,badChains);
for p = 1:length(parameters)
    clearvars ind
    ind(1:ndims(samples.(parameters{p}))) = {':'};
    ind{2} = keptChains;
    samples.(parameters{p}) = samples.(parameters{p})(ind{:});
end

%reassign nChains to reflect removal of chain(s)
nChains = numel(keptChains);

%output warning
if nargout == 1
    warning(['if there is a nChains variable in the workspace, ' ...
        'its value is now incorrect!  please reassign it such that ' ...
        'nChains = %i.'],nChains)
end

end